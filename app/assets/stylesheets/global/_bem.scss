// Based upon https://medium.com/@marcmintel/5239d2371321

$element-separator: '__';
$modifier-separator: '--';

/**
 * Transforms a selector into a string.
 *
 * @param Selector $selector The selector (&)
 *
 * @return string
 */
@function selector-to-string($selector) {
  $selector: inspect($selector); // cast to string
  $selector: str-slice($selector, 2, -2); // remove brackets
  @return $selector;
}

/**
 * Checks if the selector contains a modifier (--modifier).
 *
 * @param string $selector The selector that has to be checked
 *
 * @return bool
 */
@function contains-modifier($selector) {
  $selector: selector-to-string($selector);
  @if str-index($selector, $modifier-separator) {
    @return true;
  } @else {
    @return false;
  }
}

/**
 * Gets the block in which the selector is. (block__element--modifier -> block)
 *
 * @param string $selector
 *
 * @return string
 */
@function get-block($selector) {
  $selector: selector-to-string($selector);
  $modifierStart: str-index($selector, $modifier-separator) - 1;
  @return str-slice($selector, 0, $modifierStart);
}

/**
 * Block
 *
 * Usage:
 *  @include block(button) {
 *    color: blue;
 *  }
 */
@mixin block($block) {
  .#{$block} {
    @content;
  }
}

/**
 * Element
 *
 * Usage:
 *  @include block(button) {
 *    color: blue;
 *
 *    @include element(icon) {
 *      color: white;
 *    }
 *  }
 */
@mixin element($element) {
  $selector: &;
  @if contains-modifier($selector) {
    $block: get-block($selector);
    @at-root {
      #{$selector} {
        #{$block + $element-separator + $element} {
          @content;
        }
      }
    }
  } @else {
    @at-root {
      #{$selector + $element-separator + $element} {
        @content;
      }
    }
  }
}

/**
 * Modifier
 *
 * Usage:
 *  @include block(button) {
 *    color: blue;
 *
 *    @include element(icon) {
 *      color: white;
 *    }
 *    @include modifier(blue) {
 *      color: red;
 *
 *      @include element(icon) {
 *        color: purple;
 *      }
 *    }
 *  }
 */
@mixin modifier($modifier) {
  @at-root {
    #{&}#{$modifier-separator + $modifier} {
      @content;
    }
  }
}
